//! This crate defines constants for three types of tree-sitter queries for lots of parsers.
//! It is intended to be used via [syntastica](https://crates.io/crates/syntastica).
//!
//! The three types of queries are:
//!
//! 1. `highlights`: defining the highlight captures for nodes
//! 2. `injections`: defining where other languages are injected for highlighting
//! 3. `locals`: keeping track of scopes, variables, parameters, etc. to have occurrences of those
//!    be highlighted the same everywhere
//!
//! The constants are defined as `<language_name>_<kind>` where `<kind>` is one of `HIGHLIGHTS`,
//! `INJECTIONS`, or `LOCALS`. The `INJECTIONS` and `LOCALS` may be empty for some languages.
//!
//! The crate source is automatically generated with `cargo xtask codegen` inside the
//! syntastica workspace.
#![cfg_attr(all(doc, CHANNEL_NIGHTLY), feature(doc_auto_cfg))]
#![cfg_attr(rustfmt, rustfmt_skip)]

pub const ASM_HIGHLIGHTS: &str = "(\n  [\n    \",\"\n    \":\"\n  ] @punctuation.delimiter\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"+\"\n    \"-\"\n    \"*\"\n  ] @operator\n)\n\n(\n  [\n    \"byte\"\n    \"word\"\n    \"dword\"\n    \"qword\"\n    \"ptr\"\n    \"rel\"\n  ] @keyword\n)\n\n(\n  (string) @string\n)\n\n(\n  (int) @number\n)\n\n(\n  (line_comment) @comment @spell\n)\n\n(instruction\n  kind: (_) @function.call\n)\n\n(meta\n  kind: (_) @function.builtin\n)\n\n(\n  (reg) @variable.builtin\n)\n\n(label\n  (ident) @label\n)";
pub const ASM_INJECTIONS: &str = "";
pub const ASM_LOCALS: &str = "";

pub const BASH_HIGHLIGHTS: &str = "(\n  (program\n    .\n    (comment) @preproc\n  )\n  (#match? @preproc \"^#!/\")\n)\n\n(\n  (regex) @string.regex\n)\n\n(case_item\n  value: (word) @parameter\n)\n\n(\n  (variable_name) @constant\n  (#match? @constant \"^[A-Z][A-Z_0-9]*$\")\n)\n\n(\n  (variable_name) @variable\n)\n\n(expansion\n  [\n    \"${\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(file_redirect\n  descriptor: (file_descriptor) @operator\n  destination: (word) @parameter\n)\n\n(\n  (word) @number\n  (#match? @number \"^[0-9]+$\")\n)\n\n(command\n  argument: [\n    (word) @parameter\n    (concatenation\n      (word) @parameter\n    )\n  ]\n)\n\n(\n  (command_name\n    (word) @function.builtin\n  )\n  (#match? @function.builtin \"^(alias|cd|clear|echo|eval|exit|getopts|popd|pushd|return|set|shift|shopt|source|test)$\")\n)\n\n(command_name\n  (word) @function.call\n)\n\n(function_definition\n  name: (word) @function\n)\n\n(process_substitution\n  [\n    \"<(\"\n    \")\"\n  ] @punctuation.bracket\n)\n\n(command_substitution\n  [\n    \"$(\"\n    \")\"\n  ] @punctuation.bracket\n)\n\n(\n  (test_operator) @string\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\n  (word) @boolean\n  (#match? @boolean \"^(true|false)$\")\n)\n\n(\n  (word) @constant.builtin\n  (#match? @constant.builtin \"^SIG(HUP|INT|QUIT|ILL|TRAP|ABRT|BUS|FPE|KILL|USR[12]|SEGV|PIPE|ALRM|TERM|STKFLT|CHLD|CONT|STOP|TSTP|TT(IN|OU)|URG|XCPU|XFSZ|VTALRM|PROF|WINCH|IO|PWR|SYS|RTMIN([+]([1-9]|1[0-5]))?|RTMAX(-([1-9]|1[0-4]))?)$\")\n)\n\n(\n  (special_variable_name) @constant\n)\n\n(\"function\"\n  @keyword.function\n)\n\n(\n  [\n    \"declare\"\n    \"export\"\n    \"local\"\n    \"readonly\"\n    \"unset\"\n  ] @keyword\n)\n\n(\n  [\n    \"for\"\n    \"do\"\n    \"done\"\n    \"while\"\n  ] @repeat\n)\n\n(\n  [\n    \"if\"\n    \"then\"\n    \"else\"\n    \"elif\"\n    \"fi\"\n    \"case\"\n    \"in\"\n    \"esac\"\n  ] @conditional\n)\n\n(variable_assignment\n  (word) @string\n)\n\n(\n  [\n    (string)\n    (raw_string)\n    (ansi_c_string)\n    (heredoc_body)\n  ] @string @spell\n)\n\n(\n  [\n    \">\"\n    \">>\"\n    \"<\"\n    \"<<\"\n    \"&\"\n    \"&&\"\n    \"|\"\n    \"||\"\n    \"=\"\n    \"=~\"\n    \"==\"\n    \"!=\"\n  ] @operator\n)\n\n(\n  [\"$\"] @punctuation.special\n)\n\n(\n  [\n    \";\"\n    \";;\"\n    (heredoc_start)\n  ] @punctuation.delimiter\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"((\"\n    \"))\"\n    \"{\"\n    \"}\"\n    \"[\"\n    \"]\"\n    \"[[\"\n    \"]]\"\n  ] @punctuation.bracket\n)\n\n(\n  (expansion\n    \"${\" @punctuation.special\n    \"}\" @punctuation.special\n  ) @none\n)\n\n(\n  (simple_expansion) @none\n)";
pub const BASH_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(\n  (regex) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"regex\")\n)\n\n(command\n  name: (command_name\n    (word) @_command\n  )\n  argument: (raw_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#match? @_command \"^[gnm]?awk$\")\n  (#set! injection.language \"awk\")\n)";
pub const BASH_LOCALS: &str = "(\n  (function_definition) @local.scope\n)\n\n(variable_assignment\n  name: (variable_name) @local.definition\n)\n\n(function_definition\n  name: (word) @local.definition\n)\n\n(\n  (variable_name) @local.reference\n)\n\n(\n  (word) @local.reference\n)";

pub const C_HIGHLIGHTS: &str = "(\n  (ERROR) @error\n)\n\n(\n  [\n    \"__attribute__\"\n    \"__cdecl\"\n    \"__clrcall\"\n    \"__stdcall\"\n    \"__fastcall\"\n    \"__thiscall\"\n    \"__vectorcall\"\n    \"_unaligned\"\n    \"__unaligned\"\n    \"__declspec\"\n    (attribute_declaration)\n  ] @attribute\n)\n\n(preproc_params\n  (identifier) @parameter\n)\n\n(parameter_declaration\n  declarator: (pointer_declarator) @parameter\n)\n\n(parameter_declaration\n  declarator: (identifier) @parameter\n)\n\n(\n  (comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(preproc_function_def\n  name: (identifier) @function.macro\n)\n\n(function_declarator\n  declarator: (identifier) @function\n)\n\n(call_expression\n  function: (field_expression\n    field: (field_identifier) @function.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(preproc_call\n  directive: (preproc_directive) @_u\n  argument: (_) @constant\n  (#eq? @_u \"#undef\")\n)\n\n(preproc_def\n  name: (_) @constant\n)\n\n(\n  (identifier) @constant.builtin\n  (#match? @constant.builtin \"^(stderr|stdin|stdout)$\")\n)\n\n(case_statement\n  value: (identifier) @constant\n)\n\n(enumerator\n  name: (identifier) @constant\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^[A-Z][A-Z0-9_]+$\")\n)\n\n(\n  (primitive_type) @type.builtin\n)\n\n(type_definition\n  declarator: (type_identifier) @type.definition\n)\n\n(linkage_specification\n  \"extern\" @storageclass\n)\n\n(\n  (type_qualifier) @type.qualifier\n)\n\n(\n  (storage_class_specifier) @storageclass\n)\n\n(\n  [\n    (type_identifier)\n    (sized_type_specifier)\n    (type_descriptor)\n  ] @type\n)\n\n(\n  (statement_identifier) @label\n)\n\n(\n  (\n    (field_identifier) @property\n  )\n  (#has-ancestor? @property field_declaration)\n  (#not-has-ancestor? @property function_declarator)\n)\n\n(\n  (field_designator) @property\n)\n\n(\n  (\n    (field_expression\n      (field_identifier) @property\n    )\n  ) @_parent\n  (#not-has-parent? @_parent template_method function_declarator call_expression)\n)\n\n(\n  [\n    (preproc_arg)\n    (preproc_defined)\n  ] @function.macro\n)\n\n(\n  (char_literal) @character\n)\n\n(\n  (number_literal) @number\n)\n\n(\n  (null) @constant.builtin\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (system_lib_string) @string\n)\n\n(\n  (string_literal) @string\n)\n\n(conditional_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(comma_expression\n  [\",\"] @operator\n)\n\n(\n  [\n    \"=\"\n    \"-\"\n    \"*\"\n    \"/\"\n    \"+\"\n    \"%\"\n    \"~\"\n    \"|\"\n    \"&\"\n    \"^\"\n    \"<<\"\n    \">>\"\n    \"->\"\n    \".\"\n    \"<\"\n    \"<=\"\n    \">=\"\n    \">\"\n    \"==\"\n    \"!=\"\n    \"!\"\n    \"&&\"\n    \"||\"\n    \"-=\"\n    \"+=\"\n    \"*=\"\n    \"/=\"\n    \"%=\"\n    \"|=\"\n    \"&=\"\n    \"^=\"\n    \">>=\"\n    \"<<=\"\n    \"--\"\n    \"++\"\n  ] @operator\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\"...\"\n  @punctuation.special\n)\n\n(\n  [\n    \";\"\n    \":\"\n    \",\"\n  ] @punctuation.delimiter\n)\n\n(\"#include\"\n  @include\n)\n\n(\"#define\"\n  @define\n)\n\n(\n  [\n    \"#if\"\n    \"#ifdef\"\n    \"#ifndef\"\n    \"#else\"\n    \"#elif\"\n    \"#endif\"\n    (preproc_directive)\n  ] @preproc\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"case\"\n    \"switch\"\n  ] @conditional\n)\n\n(\n  [\n    \"while\"\n    \"for\"\n    \"do\"\n    \"continue\"\n    \"break\"\n  ] @repeat\n)\n\n(\"return\"\n  @keyword.return\n)\n\n(\"sizeof\"\n  @keyword.operator\n)\n\n(\n  [\n    \"default\"\n    \"enum\"\n    \"struct\"\n    \"typedef\"\n    \"union\"\n    \"goto\"\n  ] @keyword\n)\n\n(\n  (identifier) @variable\n)";
pub const C_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(\n  (preproc_arg) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"c\")\n)";
pub const C_LOCALS: &str = "";

pub const CPP_HIGHLIGHTS: &str = "(\n  (literal_suffix) @operator\n)\n\n(template_argument_list\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(\"::\"\n  @punctuation.delimiter\n)\n\n(\"<=>\"\n  @operator\n)\n\n(\n  [\n    \"new\"\n    \"delete\"\n    \"xor\"\n    \"bitand\"\n    \"bitor\"\n    \"compl\"\n    \"not\"\n    \"xor_eq\"\n    \"and_eq\"\n    \"or_eq\"\n    \"not_eq\"\n    \"and\"\n    \"or\"\n  ] @keyword.operator\n)\n\n(\n  [\n    \"public\"\n    \"private\"\n    \"protected\"\n    \"virtual\"\n    \"final\"\n  ] @type.qualifier\n)\n\n(\n  [\n    \"co_yield\"\n    \"co_return\"\n  ] @keyword.coroutine.return\n)\n\n(\n  [\"co_await\"] @keyword.coroutine\n)\n\n(\n  [\n    \"class\"\n    \"decltype\"\n    \"explicit\"\n    \"friend\"\n    \"namespace\"\n    \"override\"\n    \"template\"\n    \"typename\"\n    \"using\"\n    \"concept\"\n    \"requires\"\n  ] @keyword\n)\n\n(\n  [\n    \"try\"\n    \"catch\"\n    \"noexcept\"\n    \"throw\"\n  ] @exception\n)\n\n(\n  (raw_string_literal) @string\n)\n\n(\n  (false) @boolean\n)\n\n(\n  (true) @boolean\n)\n\n(\n  (nullptr) @constant.builtin\n)\n\n(\n  (this) @variable.builtin\n)\n\n(\n  (field_initializer\n    (field_identifier) @constructor\n    (argument_list)\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(\n  (call_expression\n    function: (field_expression\n      field: (field_identifier) @constructor\n    )\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(\n  (call_expression\n    function: (qualified_identifier\n      name: (identifier) @constructor\n    )\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(\n  (call_expression\n    function: (identifier) @constructor\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(\n  (function_declarator\n    (qualified_identifier\n      (identifier) @constructor\n    )\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(call_expression\n  (field_expression\n    (field_identifier) @method.call\n  )\n)\n\n(function_declarator\n  (template_method\n    (field_identifier) @method\n  )\n)\n\n(\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (qualified_identifier\n          (template_function\n            (identifier) @function.call\n          )\n        )\n      )\n    )\n  ) @_parent\n  (#has-ancestor? @_parent call_expression)\n)\n\n(call_expression\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (template_function\n          (identifier) @function.call\n        )\n      )\n    )\n  )\n)\n\n(call_expression\n  (qualified_identifier\n    (qualified_identifier\n      (template_function\n        (identifier) @function.call\n      )\n    )\n  )\n)\n\n(call_expression\n  (qualified_identifier\n    (template_function\n      (identifier) @function.call\n    )\n  )\n)\n\n(call_expression\n  (template_function\n    (identifier) @function.call\n  )\n)\n\n(\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (qualified_identifier\n          (identifier) @function.call\n        )\n      )\n    )\n  ) @_parent\n  (#has-ancestor? @_parent call_expression)\n)\n\n(call_expression\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (identifier) @function.call\n      )\n    )\n  )\n)\n\n(call_expression\n  (qualified_identifier\n    (qualified_identifier\n      (identifier) @function.call\n    )\n  )\n)\n\n(call_expression\n  (qualified_identifier\n    (identifier) @function.call\n  )\n)\n\n(\"static_assert\"\n  @function.builtin\n)\n\n(\"operator\"\n  @function\n)\n\n(\n  (operator_name) @function\n)\n\n(function_declarator\n  (template_function\n    (identifier) @function\n  )\n)\n\n(\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (qualified_identifier\n          (identifier) @function\n        )\n      )\n    )\n  ) @_parent\n  (#has-ancestor? @_parent function_declarator)\n)\n\n(function_declarator\n  (qualified_identifier\n    (qualified_identifier\n      (qualified_identifier\n        (identifier) @function\n      )\n    )\n  )\n)\n\n(function_declarator\n  (qualified_identifier\n    (qualified_identifier\n      (identifier) @function\n    )\n  )\n)\n\n(function_declarator\n  (qualified_identifier\n    (identifier) @function\n  )\n)\n\n(destructor_name\n  (identifier) @method\n)\n\n(using_declaration\n  .\n  \"using\"\n  .\n  \"namespace\"\n  .\n  [\n    (qualified_identifier)\n    (identifier)\n  ] @namespace\n)\n\n(case_statement\n  value: (qualified_identifier\n    (identifier) @constant\n  )\n)\n\n(\n  (namespace_identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (namespace_identifier) @namespace\n)\n\n(\n  (auto) @type.builtin\n)\n\n(alias_declaration\n  name: (type_identifier) @type.definition\n)\n\n(concept_definition\n  name: (identifier) @type.definition\n)\n\n(function_declarator\n  declarator: (field_identifier) @method\n)\n\n(field_initializer\n  (field_identifier) @property\n)\n\n(field_declaration\n  (field_identifier) @field\n)\n\n(\n  (\n    (field_expression\n      (field_identifier) @method\n    )\n  ) @_parent\n  (#has-parent? @_parent template_method function_declarator)\n)\n\n(optional_parameter_declaration\n  declarator: (_) @parameter\n)\n\n(variadic_parameter_declaration\n  declarator: (variadic_declarator\n    (_) @parameter\n  )\n)\n\n(parameter_declaration\n  declarator: (reference_declarator) @parameter\n)\n\n(\n  (identifier) @field\n  (#match? @field \"(^_|^m_|_$)\")\n)\n\n(\n  (ERROR) @error\n)\n\n(\n  [\n    \"__attribute__\"\n    \"__cdecl\"\n    \"__clrcall\"\n    \"__stdcall\"\n    \"__fastcall\"\n    \"__thiscall\"\n    \"__vectorcall\"\n    \"_unaligned\"\n    \"__unaligned\"\n    \"__declspec\"\n    (attribute_declaration)\n  ] @attribute\n)\n\n(preproc_params\n  (identifier) @parameter\n)\n\n(parameter_declaration\n  declarator: (pointer_declarator) @parameter\n)\n\n(parameter_declaration\n  declarator: (identifier) @parameter\n)\n\n(\n  (comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(preproc_function_def\n  name: (identifier) @function.macro\n)\n\n(function_declarator\n  declarator: (identifier) @function\n)\n\n(call_expression\n  function: (field_expression\n    field: (field_identifier) @function.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(preproc_call\n  directive: (preproc_directive) @_u\n  argument: (_) @constant\n  (#eq? @_u \"#undef\")\n)\n\n(preproc_def\n  name: (_) @constant\n)\n\n(\n  (identifier) @constant.builtin\n  (#match? @constant.builtin \"^(stderr|stdin|stdout)$\")\n)\n\n(case_statement\n  value: (identifier) @constant\n)\n\n(enumerator\n  name: (identifier) @constant\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^[A-Z][A-Z0-9_]+$\")\n)\n\n(\n  (primitive_type) @type.builtin\n)\n\n(type_definition\n  declarator: (type_identifier) @type.definition\n)\n\n(linkage_specification\n  \"extern\" @storageclass\n)\n\n(\n  (type_qualifier) @type.qualifier\n)\n\n(\n  (storage_class_specifier) @storageclass\n)\n\n(\n  [\n    (type_identifier)\n    (sized_type_specifier)\n    (type_descriptor)\n  ] @type\n)\n\n(\n  (statement_identifier) @label\n)\n\n(\n  (\n    (field_identifier) @property\n  )\n  (#has-ancestor? @property field_declaration)\n  (#not-has-ancestor? @property function_declarator)\n)\n\n(\n  (field_designator) @property\n)\n\n(\n  (\n    (field_expression\n      (field_identifier) @property\n    )\n  ) @_parent\n  (#not-has-parent? @_parent template_method function_declarator call_expression)\n)\n\n(\n  [\n    (preproc_arg)\n    (preproc_defined)\n  ] @function.macro\n)\n\n(\n  (char_literal) @character\n)\n\n(\n  (number_literal) @number\n)\n\n(\n  (null) @constant.builtin\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (system_lib_string) @string\n)\n\n(\n  (string_literal) @string\n)\n\n(conditional_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(comma_expression\n  [\",\"] @operator\n)\n\n(\n  [\n    \"=\"\n    \"-\"\n    \"*\"\n    \"/\"\n    \"+\"\n    \"%\"\n    \"~\"\n    \"|\"\n    \"&\"\n    \"^\"\n    \"<<\"\n    \">>\"\n    \"->\"\n    \".\"\n    \"<\"\n    \"<=\"\n    \">=\"\n    \">\"\n    \"==\"\n    \"!=\"\n    \"!\"\n    \"&&\"\n    \"||\"\n    \"-=\"\n    \"+=\"\n    \"*=\"\n    \"/=\"\n    \"%=\"\n    \"|=\"\n    \"&=\"\n    \"^=\"\n    \">>=\"\n    \"<<=\"\n    \"--\"\n    \"++\"\n  ] @operator\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\"...\"\n  @punctuation.special\n)\n\n(\n  [\n    \";\"\n    \":\"\n    \",\"\n  ] @punctuation.delimiter\n)\n\n(\"#include\"\n  @include\n)\n\n(\"#define\"\n  @define\n)\n\n(\n  [\n    \"#if\"\n    \"#ifdef\"\n    \"#ifndef\"\n    \"#else\"\n    \"#elif\"\n    \"#endif\"\n    (preproc_directive)\n  ] @preproc\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"case\"\n    \"switch\"\n  ] @conditional\n)\n\n(\n  [\n    \"while\"\n    \"for\"\n    \"do\"\n    \"continue\"\n    \"break\"\n  ] @repeat\n)\n\n(\"return\"\n  @keyword.return\n)\n\n(\"sizeof\"\n  @keyword.operator\n)\n\n(\n  [\n    \"default\"\n    \"enum\"\n    \"struct\"\n    \"typedef\"\n    \"union\"\n    \"goto\"\n  ] @keyword\n)\n\n(\n  (identifier) @variable\n)";
pub const CPP_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(\n  (preproc_arg) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"c\")\n)\n\n(raw_string_literal\n  delimiter: (raw_string_delimiter) @injection.content\n  (#set! injection.language \"injection.language\")\n  (raw_string_content) @injection.content\n  (#set! injection.language \"injection.content\")\n)";
pub const CPP_LOCALS: &str = "";

pub const CSS_HIGHLIGHTS: &str = "(\n  (ERROR) @error\n)\n\n(\n  [\n    \"{\"\n    \")\"\n    \"(\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"#\"\n    \",\"\n    \".\"\n    \":\"\n    \"::\"\n    \";\"\n  ] @punctuation.delimiter\n)\n\n(\n  [\n    (integer_value)\n    (float_value)\n  ] @number\n)\n\n(\n  [\n    (string_value)\n    (color_value)\n    (unit)\n  ] @string\n)\n\n(\n  (plain_value) @type\n  (#match? @type \"^--\")\n)\n\n(\n  (property_name) @type.definition\n  (#match? @type.definition \"^--\")\n)\n\n(\n  (namespace_name) @namespace\n)\n\n(\n  [\n    (class_name)\n    (id_name)\n    (property_name)\n    (feature_name)\n    (attribute_name)\n  ] @property\n)\n\n(pseudo_class_selector\n  (class_name) @property\n)\n\n(pseudo_element_selector\n  \"::\"\n  (tag_name) @property\n)\n\n(attribute_selector\n  (plain_value) @string\n)\n\n(\n  (important) @type.qualifier\n)\n\n(\n  [\n    \"~\"\n    \">\"\n    \"+\"\n    \"-\"\n    \"*\"\n    \"/\"\n    \"=\"\n    \"^=\"\n    \"|=\"\n    \"~=\"\n    \"$=\"\n    \"*=\"\n    \"and\"\n    \"or\"\n    \"not\"\n    \"only\"\n  ] @operator\n)\n\n(\n  (function_name) @function\n)\n\n(\n  [\n    (tag_name)\n    (nesting_selector)\n    (universal_selector)\n  ] @type\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\"@import\"\n  @include\n)\n\n(\n  [\n    \"@media\"\n    \"@charset\"\n    \"@namespace\"\n    \"@supports\"\n    \"@keyframes\"\n    (at_keyword)\n    (to)\n    (from)\n  ] @keyword\n)";
pub const CSS_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)";
pub const CSS_LOCALS: &str = "";

pub const GO_HIGHLIGHTS: &str = "(\n  (interpreted_string_literal) @spell\n  (#not-has-parent? @spell import_spec)\n)\n\n(\n  (ERROR) @error\n)\n\n(source_file\n  (comment)\n  + @comment.documentation\n  .\n  (var_declaration)\n)\n\n(source_file\n  (comment)\n  + @comment.documentation\n  .\n  (type_declaration)\n)\n\n(source_file\n  (comment)\n  + @comment.documentation\n  .\n  (function_declaration)\n)\n\n(source_file\n  (comment)\n  + @comment.documentation\n  .\n  (const_declaration)\n)\n\n(source_file\n  .\n  (comment)\n  + @comment.documentation\n)\n\n(\n  (comment) @comment @spell\n)\n\n(field_declaration\n  name: (field_identifier) @field\n)\n\n(keyed_element\n  .\n  (literal_element\n    (identifier) @field\n  )\n)\n\n(\n  (nil) @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  (imaginary_literal) @number\n)\n\n(\n  (float_literal) @float\n)\n\n(\n  (int_literal) @number\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (rune_literal) @string\n)\n\n(\n  (raw_string_literal) @string @spell\n)\n\n(\n  (interpreted_string_literal) @string\n)\n\n(\"]\"\n  @punctuation.bracket\n)\n\n(\"[\"\n  @punctuation.bracket\n)\n\n(\"}\"\n  @punctuation.bracket\n)\n\n(\"{\"\n  @punctuation.bracket\n)\n\n(\")\"\n  @punctuation.bracket\n)\n\n(\"(\"\n  @punctuation.bracket\n)\n\n(\";\"\n  @punctuation.delimiter\n)\n\n(\":\"\n  @punctuation.delimiter\n)\n\n(\",\"\n  @punctuation.delimiter\n)\n\n(\".\"\n  @punctuation.delimiter\n)\n\n(\n  (identifier) @function.builtin\n  (#match? @function.builtin \"^(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)$\")\n)\n\n(\n  (type_identifier) @type.builtin\n  (#match? @type.builtin \"^(any|bool|byte|complex128|complex64|error|float32|float64|int|int16|int32|int64|int8|rune|string|uint|uint16|uint32|uint64|uint8|uintptr)$\")\n)\n\n(\n  [\n    \"else\"\n    \"case\"\n    \"switch\"\n    \"if\"\n  ] @conditional\n)\n\n(\n  [\n    \"import\"\n    \"package\"\n  ] @include\n)\n\n(\"for\"\n  @repeat\n)\n\n(\"return\"\n  @keyword.return\n)\n\n(\"func\"\n  @keyword.function\n)\n\n(\n  [\n    \"break\"\n    \"chan\"\n    \"const\"\n    \"continue\"\n    \"default\"\n    \"defer\"\n    \"go\"\n    \"goto\"\n    \"interface\"\n    \"map\"\n    \"range\"\n    \"select\"\n    \"struct\"\n    \"type\"\n    \"var\"\n    \"fallthrough\"\n  ] @keyword\n)\n\n(\n  [\n    \"--\"\n    \"-\"\n    \"-=\"\n    \":=\"\n    \"!\"\n    \"!=\"\n    \"...\"\n    \"*\"\n    \"*\"\n    \"*=\"\n    \"/\"\n    \"/=\"\n    \"&\"\n    \"&&\"\n    \"&=\"\n    \"%\"\n    \"%=\"\n    \"^\"\n    \"^=\"\n    \"+\"\n    \"++\"\n    \"+=\"\n    \"<-\"\n    \"<\"\n    \"<<\"\n    \"<<=\"\n    \"<=\"\n    \"=\"\n    \"==\"\n    \">\"\n    \">=\"\n    \">>\"\n    \">>=\"\n    \"|\"\n    \"|=\"\n    \"||\"\n    \"~\"\n  ] @operator\n)\n\n(method_spec\n  name: (field_identifier) @method\n)\n\n(method_declaration\n  name: (field_identifier) @method\n)\n\n(function_declaration\n  name: (identifier) @function\n)\n\n(call_expression\n  function: (selector_expression\n    field: (field_identifier) @method.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(const_spec\n  name: (identifier) @constant\n)\n\n(\n  (identifier) @constant\n  (#eq? @constant \"_\")\n)\n\n(\n  (label_name) @label\n)\n\n(variadic_parameter_declaration\n  (identifier) @parameter\n)\n\n(parameter_declaration\n  (identifier) @parameter\n)\n\n(\n  (package_identifier) @namespace\n)\n\n(\n  (identifier) @variable\n)\n\n(\n  (field_identifier) @property\n)\n\n(type_spec\n  name: (type_identifier) @type.definition\n)\n\n(\n  (type_identifier) @type\n)";
pub const GO_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(call_expression\n  (selector_expression) @_function\n  (#any-of? @_function \"regexp.Match\"\"regexp.MatchReader\"\"regexp.MatchString\"\"regexp.Compile\"\"regexp.CompilePOSIX\"\"regexp.MustCompile\"\"regexp.MustCompilePOSIX\")\n  (argument_list\n    .\n    [\n      (raw_string_literal)\n      (interpreted_string_literal)\n    ] @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n  )\n  (#set! injection.language \"regex\")\n)";
pub const GO_LOCALS: &str = "(\n  (block) @local.scope\n)\n\n(parameter_declaration\n  (identifier) @local.definition\n)\n\n(variadic_parameter_declaration\n  (identifier) @local.definition\n)\n\n(short_var_declaration\n  left: (expression_list\n    (identifier) @local.definition\n  )\n)\n\n(var_spec\n  (identifier) @local.definition\n)\n\n(for_statement\n  (range_clause\n    left: (expression_list\n      (identifier) @local.definition\n    )\n  )\n)\n\n(const_declaration\n  (const_spec\n    name: (identifier) @local.definition\n  )\n)\n\n(\n  (identifier) @local.reference\n)\n\n(\n  (field_identifier) @local.reference\n)";

pub const HTML_HIGHLIGHTS: &str = "(\"<!\"\n  @tag.delimiter\n)\n\n(\n  (doctype) @constant\n)\n\n(\"=\"\n  @operator\n)\n\n(\n  [\n    \"<\"\n    \">\"\n    \"</\"\n    \"/>\"\n  ] @tag.delimiter\n)\n\n(\n  (attribute\n    (attribute_name) @_attr\n    (quoted_attribute_value\n      (attribute_value) @text.uri\n    )\n  )\n  (#match? @_attr \"^(href|src)$\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.uri\n  )\n  (#eq? @_tag \"a\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.literal\n  )\n  (#match? @_tag \"^(code|kbd)$\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.underline\n  )\n  (#eq? @_tag \"u\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.strike\n  )\n  (#match? @_tag \"^(s|del)$\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.emphasis\n  )\n  (#match? @_tag \"^(em|i)$\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.strong\n  )\n  (#match? @_tag \"^(strong|b)$\")\n)\n\n(\n  (element\n    (start_tag\n      (tag_name) @_tag\n    )\n    (text) @text.title\n  )\n  (#match? @_tag \"^(h[0-9]|title)$\")\n)\n\n(\n  (text) @text @spell\n)\n\n(attribute\n  (quoted_attribute_value) @string\n)\n\n(\n  (attribute_name) @tag.attribute\n)\n\n(\n  (comment) @comment\n)\n\n(\n  (erroneous_end_tag_name) @error\n)\n\n(\n  (tag_name) @tag\n)";
pub const HTML_INJECTIONS: &str = "(\n  (style_element\n    (start_tag) @_no_type_lang\n    (#not-lua-match? @_no_type_lang \"%slang%s*=\")\n    (#not-lua-match? @_no_type_lang \"%stype%s*=\")\n    (raw_text) @injection.content\n    (#set! injection.language \"injection.content\")\n  )\n  (#set! injection.language \"css\")\n)\n\n(\n  (style_element\n    (start_tag\n      (attribute\n        (attribute_name) @_type\n        (quoted_attribute_value\n          (attribute_value) @_css\n        )\n      )\n    )\n    (raw_text) @injection.content\n    (#set! injection.language \"injection.content\")\n  )\n  (#eq? @_type \"type\")\n  (#eq? @_css \"text/css\")\n  (#set! injection.language \"css\")\n)\n\n(\n  (script_element\n    (start_tag) @_no_type_lang\n    (#not-lua-match? @_no_type_lang \"%slang%s*=\")\n    (#not-lua-match? @_no_type_lang \"%stype%s*=\")\n    (raw_text) @injection.content\n    (#set! injection.language \"injection.content\")\n  )\n  (#set! injection.language \"javascript\")\n)\n\n(script_element\n  (start_tag\n    (\n      (attribute\n        (attribute_name) @_attr\n        (#eq? @_attr \"type\")\n        (quoted_attribute_value\n          (attribute_value) @injection.content\n          (#set! injection.language \"injection.language\")\n        )\n      )\n    )\n  )\n  (raw_text) @injection.content\n  (#set! injection.language \"injection.content\")\n)\n\n(\n  (attribute\n    (attribute_name) @_attr\n    (quoted_attribute_value\n      (attribute_value) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n  )\n  (#eq? @_attr \"style\")\n  (#set! injection.language \"css\")\n)\n\n(\n  (attribute\n    (quoted_attribute_value\n      (attribute_value) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n  )\n  (#lua-match? @injection.content \"%${\")\n  (#offset! @injection.content 0 2 0 -1)\n  (#set! injection.language \"javascript\")\n)\n\n(\n  (attribute\n    (attribute_value) @injection.content\n    (#set! injection.language \"injection.content\")\n  )\n  (#lua-match? @injection.content \"%${\")\n  (#offset! @injection.content 0 2 0 -2)\n  (#set! injection.language \"javascript\")\n)\n\n(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(element\n  (_\n    (tag_name) @_tagname\n    (#eq? @_tagname \"input\")\n    (\n      (attribute\n        (attribute_name) @_attr\n        [\n          (quoted_attribute_value\n            (attribute_value) @injection.content\n            (#set! injection.language \"injection.content\")\n          )\n          (attribute_value) @injection.content\n          (#set! injection.language \"injection.content\")\n        ]\n        (#eq? @_attr \"pattern\")\n        (#set! injection.language \"regex\")\n      )\n    )\n  )\n)\n\n(attribute\n  (attribute_name) @_name\n  (#lua-match? @_name \"^on[a-z]+$\")\n  (quoted_attribute_value\n    (attribute_value) @injection.content\n    (#set! injection.language \"injection.content\")\n  )\n  (#set! injection.language \"javascript\")\n)\n\n(element\n  (start_tag\n    (tag_name) @_py_script\n  )\n  (text) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#any-of? @_py_script \"py-script\"\"py-repl\")\n  (#set! injection.language \"python\")\n)\n\n(script_element\n  (start_tag\n    (attribute\n      (attribute_name) @_attr\n      (quoted_attribute_value\n        (attribute_value) @_type\n      )\n    )\n  )\n  (raw_text) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#eq? @_attr \"type\")\n  (#any-of? @_type \"pyscript\"\"py-script\")\n  (#set! injection.language \"python\")\n)\n\n(element\n  (start_tag\n    (tag_name) @_py_config\n  )\n  (text) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#eq? @_py_config \"py-config\")\n  (#set! injection.language \"toml\")\n)";
pub const HTML_LOCALS: &str = "";

pub const JAVA_HIGHLIGHTS: &str = "(\n  (line_comment) @comment.documentation\n  (#match? @comment.documentation \"^///$\")\n)\n\n(\n  (line_comment) @comment.documentation\n  (#match? @comment.documentation \"^///[^/]\")\n)\n\n(\n  (block_comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  [\n    (line_comment)\n    (block_comment)\n  ] @comment @spell\n)\n\n(labeled_statement\n  (identifier) @label\n)\n\n(\n  [\n    \"throw\"\n    \"throws\"\n    \"finally\"\n    \"try\"\n    \"catch\"\n  ] @exception\n)\n\n(type_parameters\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(type_arguments\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"(\"\n    \")\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"[\"\n    \"]\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \";\"\n    \".\"\n    \"...\"\n    \",\"\n  ] @punctuation.delimiter\n)\n\n(\n  [\n    \"exports\"\n    \"import\"\n    \"module\"\n    \"opens\"\n    \"package\"\n    \"provides\"\n    \"requires\"\n    \"uses\"\n  ] @include\n)\n\n(\n  [\n    \"for\"\n    \"while\"\n    \"do\"\n    \"continue\"\n    \"break\"\n  ] @repeat\n)\n\n(ternary_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"switch\"\n    \"case\"\n  ] @conditional\n)\n\n(\n  [\"new\"] @keyword.operator\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\n  [\n    \"transient\"\n    \"volatile\"\n  ] @storageclass\n)\n\n(modifiers\n  \"synchronized\" @type.qualifier\n)\n\n(\n  [\n    \"abstract\"\n    \"final\"\n    \"native\"\n    \"non-sealed\"\n    \"open\"\n    \"private\"\n    \"protected\"\n    \"public\"\n    \"sealed\"\n    \"static\"\n    \"strictfp\"\n    \"transitive\"\n  ] @type.qualifier\n)\n\n(synchronized_statement\n  \"synchronized\" @keyword\n)\n\n(\n  [\n    \"assert\"\n    \"class\"\n    \"record\"\n    \"default\"\n    \"enum\"\n    \"extends\"\n    \"implements\"\n    \"instanceof\"\n    \"interface\"\n    \"permits\"\n    \"to\"\n    \"with\"\n  ] @keyword\n)\n\n(\n  (null_literal) @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  [\n    (decimal_floating_point_literal)\n    (hex_floating_point_literal)\n  ] @float\n)\n\n(\n  [\n    (hex_integer_literal)\n    (decimal_integer_literal)\n    (octal_integer_literal)\n    (binary_integer_literal)\n  ] @number\n)\n\n(\n  (character_literal) @character\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (string_literal) @string\n)\n\n(\n  (this) @variable.builtin\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^[A-Z_][A-Z[0-9]_]+$\")\n)\n\n(\n  [\n    (boolean_type)\n    (integral_type)\n    (floating_point_type)\n    (void_type)\n  ] @type.builtin\n)\n\n(field_access\n  field: (identifier) @field\n)\n\n(field_declaration\n  declarator: (variable_declarator\n    name: (identifier) @field\n  )\n)\n\n(\n  (scoped_identifier\n    scope: (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (field_access\n    object: (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (method_reference\n    .\n    (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (method_invocation\n    object: (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (type_identifier) @type\n)\n\n(constructor_declaration\n  name: (identifier) @type\n)\n\n(enum_declaration\n  name: (identifier) @type\n)\n\n(record_declaration\n  name: (identifier) @type\n)\n\n(class_declaration\n  name: (identifier) @type\n)\n\n(interface_declaration\n  name: (identifier) @type\n)\n\n(\n  [\n    \"@\"\n    \"+\"\n    \":\"\n    \"++\"\n    \"-\"\n    \"--\"\n    \"&\"\n    \"&&\"\n    \"|\"\n    \"||\"\n    \"!\"\n    \"!=\"\n    \"==\"\n    \"*\"\n    \"/\"\n    \"%\"\n    \"<\"\n    \"<=\"\n    \">\"\n    \">=\"\n    \"=\"\n    \"-=\"\n    \"+=\"\n    \"*=\"\n    \"/=\"\n    \"%=\"\n    \"->\"\n    \"^\"\n    \"^=\"\n    \"&=\"\n    \"|=\"\n    \"~\"\n    \">>\"\n    \">>>\"\n    \"<<\"\n    \"::\"\n  ] @operator\n)\n\n(marker_annotation\n  name: (identifier) @attribute\n)\n\n(annotation\n  name: (identifier) @attribute\n)\n\n(lambda_expression\n  parameters: (identifier) @parameter\n)\n\n(inferred_parameters\n  (identifier) @parameter\n)\n\n(spread_parameter\n  (variable_declarator\n    name: (identifier) @parameter\n  )\n)\n\n(catch_formal_parameter\n  name: (identifier) @parameter\n)\n\n(formal_parameter\n  name: (identifier) @parameter\n)\n\n(\n  (super) @function.builtin\n)\n\n(method_invocation\n  name: (identifier) @method.call\n)\n\n(method_declaration\n  name: (identifier) @method\n)\n\n(\n  (identifier) @variable\n)";
pub const JAVA_INJECTIONS: &str = "(\n  [\n    (line_comment)\n    (block_comment)\n  ] @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)";
pub const JAVA_LOCALS: &str = "(\n  (program) @local.scope\n)\n\n(class_declaration\n  body: (_) @local.scope\n)\n\n(record_declaration\n  body: (_) @local.scope\n)\n\n(enum_declaration\n  body: (_) @local.scope\n)\n\n(\n  (lambda_expression) @local.scope\n)\n\n(\n  (enhanced_for_statement) @local.scope\n)\n\n(\n  (block) @local.scope\n)\n\n(\n  (if_statement) @local.scope\n)\n\n(if_statement\n  consequence: (_) @local.scope\n)\n\n(if_statement\n  alternative: (_) @local.scope\n)\n\n(\n  (try_statement) @local.scope\n)\n\n(\n  (catch_clause) @local.scope\n)\n\n(\n  (for_statement) @local.scope\n)\n\n(for_statement\n  body: (_) @local.scope\n)\n\n(do_statement\n  body: (_) @local.scope\n)\n\n(while_statement\n  body: (_) @local.scope\n)\n\n(\n  (constructor_declaration) @local.scope\n)\n\n(\n  (method_declaration) @local.scope\n)\n\n(package_declaration\n  (identifier) @local.definition\n)\n\n(class_declaration\n  name: (identifier) @local.definition\n)\n\n(record_declaration\n  name: (identifier) @local.definition\n)\n\n(enum_declaration\n  name: (identifier) @local.definition\n)\n\n(method_declaration\n  name: (identifier) @local.definition\n)\n\n(local_variable_declaration\n  declarator: (variable_declarator\n    name: (identifier) @local.definition\n  )\n)\n\n(enhanced_for_statement\n  name: (identifier) @local.definition\n)\n\n(formal_parameter\n  name: (identifier) @local.definition\n)\n\n(catch_formal_parameter\n  name: (identifier) @local.definition\n)\n\n(inferred_parameters\n  (identifier) @local.definition\n)\n\n(lambda_expression\n  parameters: (identifier) @local.definition\n)\n\n(field_declaration\n  declarator: (variable_declarator\n    name: (identifier) @local.definition\n  )\n)\n\n(\n  (identifier) @local.reference\n)\n\n(\n  (type_identifier) @local.reference\n)";

pub const JAVASCRIPT_HIGHLIGHTS: &str = "(\n  (optional_chain) @punctuation.delimiter\n)\n\n(formal_parameters\n  (assignment_pattern\n    left: (identifier) @parameter\n  )\n)\n\n(arrow_function\n  parameter: (identifier) @parameter\n)\n\n(formal_parameters\n  (array_pattern\n    (identifier) @parameter\n  )\n)\n\n(formal_parameters\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @parameter\n    )\n  )\n)\n\n(formal_parameters\n  (object_pattern\n    (shorthand_property_identifier_pattern) @parameter\n  )\n)\n\n(formal_parameters\n  (rest_pattern\n    (identifier) @parameter\n  )\n)\n\n(formal_parameters\n  (identifier) @parameter\n)\n\n(\n  (jsx_text) @none\n)\n\n(jsx_self_closing_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_self_closing_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_closing_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_closing_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_opening_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_opening_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_self_closing_element\n  name: (identifier) @tag\n)\n\n(jsx_closing_element\n  name: (identifier) @tag\n)\n\n(jsx_opening_element\n  name: (identifier) @tag\n)\n\n(jsx_attribute\n  (property_identifier) @tag.attribute\n)\n\n(jsx_fragment\n  [\n    \">\"\n    \"<\"\n    \"/\"\n  ] @tag.delimiter\n)\n\n(jsx_self_closing_element\n  [\n    \"/\"\n    \">\"\n    \"<\"\n  ] @tag.delimiter\n)\n\n(jsx_element\n  close_tag: (jsx_closing_element\n    [\n      \"<\"\n      \"/\"\n      \">\"\n    ] @tag.delimiter\n  )\n)\n\n(jsx_element\n  open_tag: (jsx_opening_element\n    [\n      \"<\"\n      \">\"\n    ] @tag.delimiter\n  )\n)\n\n(switch_default\n  \"default\" @conditional\n)\n\n(export_statement\n  \"default\" @keyword\n)\n\n(\n  [\n    \"throw\"\n    \"try\"\n    \"catch\"\n    \"finally\"\n  ] @exception\n)\n\n(\n  [\n    \"new\"\n    \"delete\"\n  ] @keyword.operator\n)\n\n(\n  [\"function\"] @keyword.function\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\n  [\n    \"async\"\n    \"await\"\n  ] @keyword.coroutine\n)\n\n(\n  [\n    \"break\"\n    \"class\"\n    \"const\"\n    \"debugger\"\n    \"export\"\n    \"extends\"\n    \"get\"\n    \"in\"\n    \"instanceof\"\n    \"let\"\n    \"set\"\n    \"static\"\n    \"target\"\n    \"typeof\"\n    \"var\"\n    \"with\"\n  ] @keyword\n)\n\n(\n  [\n    \"for\"\n    \"of\"\n    \"do\"\n    \"while\"\n    \"continue\"\n  ] @repeat\n)\n\n(namespace_import\n  \"as\" @include\n)\n\n(namespace_export\n  \"as\" @include\n)\n\n(import_specifier\n  \"as\" @include\n)\n\n(export_specifier\n  \"as\" @include\n)\n\n(\n  [\n    \"import\"\n    \"from\"\n  ] @include\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"switch\"\n    \"case\"\n  ] @conditional\n)\n\n(\n  (template_substitution\n    [\n      \"${\"\n      \"}\"\n    ] @punctuation.special\n  ) @none\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(unary_expression\n  [\n    \"delete\"\n    \"void\"\n    \"typeof\"\n  ] @keyword.operator\n)\n\n(unary_expression\n  [\n    \"!\"\n    \"~\"\n    \"-\"\n    \"+\"\n  ] @operator\n)\n\n(ternary_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(binary_expression\n  \"/\" @operator\n)\n\n(\n  [\n    \"--\"\n    \"-\"\n    \"-=\"\n    \"&&\"\n    \"+\"\n    \"++\"\n    \"+=\"\n    \"&=\"\n    \"/=\"\n    \"**=\"\n    \"<<=\"\n    \"<\"\n    \"<=\"\n    \"<<\"\n    \"=\"\n    \"==\"\n    \"===\"\n    \"!=\"\n    \"!==\"\n    \"=>\"\n    \">\"\n    \">=\"\n    \">>\"\n    \"||\"\n    \"%\"\n    \"%=\"\n    \"*\"\n    \"**\"\n    \">>>\"\n    \"&\"\n    \"|\"\n    \"^\"\n    \"??\"\n    \"*=\"\n    \">>=\"\n    \">>>=\"\n    \"^=\"\n    \"|=\"\n    \"&&=\"\n    \"||=\"\n    \"??=\"\n  ] @operator\n)\n\n(switch_case\n  \":\" @punctuation.delimiter\n)\n\n(pair_pattern\n  \":\" @punctuation.delimiter\n)\n\n(pair\n  \":\" @punctuation.delimiter\n)\n\n(\",\"\n  @punctuation.delimiter\n)\n\n(\".\"\n  @punctuation.delimiter\n)\n\n(\";\"\n  @punctuation.delimiter\n)\n\n(\"...\"\n  @punctuation.special\n)\n\n(\n  (identifier) @number\n  (#match? @number \"^(NaN|Infinity)$\")\n)\n\n(\n  (number) @number\n)\n\n(regex\n  \"/\" @punctuation.bracket\n)\n\n(\n  (regex_pattern) @string.regex\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (template_string) @string\n)\n\n(\n  (string) @string @spell\n)\n\n(\n  (string_fragment) @preproc\n  (#eq? @preproc \"use strict\")\n)\n\n(\n  (hash_bang_line) @preproc\n)\n\n(\n  (comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\n  [\n    (null)\n    (undefined)\n  ] @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  [\n    (this)\n    (super)\n  ] @variable.builtin\n)\n\n(namespace_import\n  (identifier) @namespace\n)\n\n(new_expression\n  constructor: (identifier) @constructor\n)\n\n(call_expression\n  function: (member_expression\n    property: [\n      (property_identifier)\n      (private_property_identifier)\n    ] @method.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (function)\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (arrow_function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (arrow_function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (function)\n)\n\n(method_definition\n  name: (property_identifier) @constructor\n  (#eq? @constructor \"constructor\")\n)\n\n(method_definition\n  name: [\n    (property_identifier)\n    (private_property_identifier)\n  ] @method\n)\n\n(generator_function_declaration\n  name: (identifier) @function\n)\n\n(generator_function\n  name: (identifier) @function\n)\n\n(function_declaration\n  name: (identifier) @function\n)\n\n(function\n  name: (identifier) @function\n)\n\n(\n  (identifier) @function.builtin\n  (#match? @function.builtin \"^(eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|require)$\")\n)\n\n(\n  (identifier) @namespace.builtin\n  (#eq? @namespace.builtin \"Intl\")\n)\n\n(\n  (identifier) @type.builtin\n  (#match? @type.builtin \"^(Object|Function|Boolean|Symbol|Number|Math|Date|String|RegExp|Map|Set|WeakMap|WeakSet|Promise|Array|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|ArrayBuffer|DataView|Error|EvalError|InternalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError)$\")\n)\n\n(\n  (identifier) @variable.builtin\n  (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n)\n\n(\n  (shorthand_property_identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (variable_declarator\n    name: (object_pattern\n      (shorthand_property_identifier_pattern)\n    )\n  ) @variable\n)\n\n(\n  (private_property_identifier) @property\n)\n\n(\n  (shorthand_property_identifier) @property\n)\n\n(\n  (property_identifier) @property\n)\n\n(\n  (identifier) @variable\n)";
pub const JAVASCRIPT_INJECTIONS: &str = "(\n  (\n    (comment) @_jsdoc_comment\n    (#lua-match? @_jsdoc_comment \"^/[*][*][^*].*[*]/$\")\n  ) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"jsdoc\")\n)\n\n(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(call_expression\n  function: (\n    (identifier) @injection.content\n    (#set! injection.language \"injection.language\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#not-eq? @injection.content \"svg\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"svg\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"gql\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"graphql\")\n  )\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"hbs\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"glimmer\")\n  )\n)\n\n(\n  (glimmer_template) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"glimmer\")\n)\n\n(call_expression\n  function: (member_expression\n    object: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (member_expression\n        object: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (call_expression\n        function: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(\n  (regex_pattern) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"regex\")\n)\n\n(\n  (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#lua-match? @injection.content \"^`#graphql\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"graphql\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(jsx_element\n  (jsx_opening_element\n    (identifier) @_name\n    (#eq? @_name \"style\")\n    (jsx_attribute) @_attr\n    (#eq? @_attr \"jsx\")\n  )\n  (jsx_expression\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language)\n  )\n)";
pub const JAVASCRIPT_LOCALS: &str = "(\n  (statement_block) @local.scope\n)\n\n(\n  (function) @local.scope\n)\n\n(\n  (arrow_function) @local.scope\n)\n\n(\n  (function_declaration) @local.scope\n)\n\n(\n  (method_definition) @local.scope\n)\n\n(\n  (for_statement) @local.scope\n)\n\n(\n  (for_in_statement) @local.scope\n)\n\n(\n  (catch_clause) @local.scope\n)\n\n(variable_declarator\n  name: (identifier) @local.definition\n)\n\n(import_specifier\n  (identifier) @local.definition\n)\n\n(namespace_import\n  (identifier) @local.definition\n)\n\n(function_declaration\n  (\n    (identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(method_definition\n  (\n    (property_identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(\n  (identifier) @local.reference\n)\n\n(\n  (shorthand_property_identifier) @local.reference\n)\n\n(field_definition\n  property: [\n    (property_identifier)\n    (private_property_identifier)\n  ] @local.definition\n)\n\n(assignment_expression\n  left: (member_expression\n    object: (this)\n    property: (property_identifier) @local.definition\n  )\n)\n\n(formal_parameters\n  (identifier) @local.definition\n)\n\n(formal_parameters\n  (assignment_pattern\n    left: (identifier) @local.definition\n  )\n)\n\n(arrow_function\n  parameter: (identifier) @local.definition\n)\n\n(formal_parameters\n  (object_pattern\n    (shorthand_property_identifier_pattern) @local.definition\n  )\n)\n\n(formal_parameters\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @local.definition\n    )\n  )\n)\n\n(formal_parameters\n  (array_pattern\n    (identifier) @local.definition\n  )\n)\n\n(formal_parameters\n  (rest_pattern\n    (identifier) @local.definition\n  )\n)\n\n(method_definition\n  (\n    [\n      (property_identifier)\n      (private_property_identifier)\n    ] @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(member_expression\n  object: (this)\n  property: (property_identifier) @local.reference\n)";

pub const JSON_HIGHLIGHTS: &str = "(\n  (escape_sequence) @conceal\n  (#eq? @conceal \"\\\\\\\"\")\n  (#set! conceal \"\\\"\")\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (\"\\\"\"\n    @conceal\n  )\n  (#set! conceal \"\")\n)\n\n(\n  [\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \",\"\n    \":\"\n  ] @punctuation.delimiter\n)\n\n(\n  (ERROR) @error\n)\n\n(\n  (string_content) @spell\n)\n\n(array\n  (string) @string\n)\n\n(pair\n  value: (string) @string\n)\n\n(pair\n  key: (string) @label\n)\n\n(\n  (number) @number\n)\n\n(\n  (null) @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)";
pub const JSON_INJECTIONS: &str = "";
pub const JSON_LOCALS: &str = "";

pub const PYTHON_HIGHLIGHTS: &str = "(\n  (ERROR) @error\n)\n\n(\n  (class_definition\n    (block\n      (function_definition\n        name: (identifier) @constructor\n      )\n    )\n  )\n  (#match? @constructor \"^(__new__|__init__)$\")\n)\n\n(\n  (class_definition\n    body: (block\n      (expression_statement\n        (assignment\n          left: (_\n            (identifier) @field\n          )\n        )\n      )\n    )\n  )\n  (#match? @field \"^([A-Z])@!.*$\")\n)\n\n(\n  (class_definition\n    body: (block\n      (expression_statement\n        (assignment\n          left: (identifier) @field\n        )\n      )\n    )\n  )\n  (#match? @field \"^([A-Z])@!.*$\")\n)\n\n(class_definition\n  superclasses: (argument_list\n    (identifier) @type\n  )\n)\n\n(class_definition\n  body: (block\n    (function_definition\n      name: (identifier) @method\n    )\n  )\n)\n\n(class_definition\n  name: (identifier) @type\n)\n\n(\n  [\n    \",\"\n    \".\"\n    \":\"\n    \";\"\n    (ellipsis)\n  ] @punctuation.delimiter\n)\n\n(interpolation\n  \"{\" @punctuation.special\n  \"}\" @punctuation.special\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(try_statement\n  (else_clause\n    \"else\" @exception\n  )\n)\n\n(raise_statement\n  \"from\" @exception\n)\n\n(\n  [\n    \"try\"\n    \"except\"\n    \"except*\"\n    \"raise\"\n    \"finally\"\n  ] @exception\n)\n\n(\n  [\n    \"for\"\n    \"while\"\n    \"break\"\n    \"continue\"\n  ] @repeat\n)\n\n(\n  [\n    \"if\"\n    \"elif\"\n    \"else\"\n    \"match\"\n    \"case\"\n  ] @conditional\n)\n\n(aliased_import\n  \"as\" @include\n)\n\n(\"import\"\n  @include\n)\n\n(import_from_statement\n  \"from\" @include\n)\n\n(future_import_statement\n  \"from\" @include\n  \"__future__\" @constant.builtin\n)\n\n(yield\n  \"from\" @keyword.return\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\n  [\n    \"async\"\n    \"await\"\n  ] @keyword.coroutine\n)\n\n(\n  [\n    \"assert\"\n    \"class\"\n    \"exec\"\n    \"global\"\n    \"nonlocal\"\n    \"pass\"\n    \"print\"\n    \"with\"\n    \"as\"\n  ] @keyword\n)\n\n(\n  [\n    \"def\"\n    \"lambda\"\n  ] @keyword.function\n)\n\n(\n  [\n    \"and\"\n    \"in\"\n    \"is\"\n    \"not\"\n    \"or\"\n    \"is not\"\n    \"not in\"\n    \"del\"\n  ] @keyword.operator\n)\n\n(\n  [\n    \"-\"\n    \"-=\"\n    \":=\"\n    \"!=\"\n    \"*\"\n    \"**\"\n    \"**=\"\n    \"*=\"\n    \"/\"\n    \"//\"\n    \"//=\"\n    \"/=\"\n    \"&\"\n    \"&=\"\n    \"%\"\n    \"%=\"\n    \"^\"\n    \"^=\"\n    \"+\"\n    \"+=\"\n    \"<\"\n    \"<<\"\n    \"<<=\"\n    \"<=\"\n    \"<>\"\n    \"=\"\n    \"==\"\n    \">\"\n    \">=\"\n    \">>\"\n    \">>=\"\n    \"@\"\n    \"@=\"\n    \"|\"\n    \"|=\"\n    \"~\"\n    \"->\"\n  ] @operator\n)\n\n(function_definition\n  body: (block\n    .\n    (expression_statement\n      (string) @string.documentation @spell\n    )\n  )\n)\n\n(class_definition\n  body: (block\n    .\n    (expression_statement\n      (string) @string.documentation @spell\n    )\n  )\n)\n\n(module\n  .\n  (expression_statement\n    (string) @string.documentation @spell\n  )\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (string) @string\n)\n\n(\n  (module\n    .\n    (comment) @preproc\n  )\n  (#match? @preproc \"^#!/\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\n  (float) @float\n)\n\n(\n  (integer) @number\n)\n\n(\n  (identifier) @variable.builtin\n  (#eq? @variable.builtin \"cls\")\n)\n\n(\n  (identifier) @variable.builtin\n  (#eq? @variable.builtin \"self\")\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  (none) @constant.builtin\n)\n\n(parameters\n  (dictionary_splat_pattern\n    (identifier) @parameter\n  )\n)\n\n(parameters\n  (list_splat_pattern\n    (identifier) @parameter\n  )\n)\n\n(typed_default_parameter\n  (identifier) @parameter\n)\n\n(typed_parameter\n  (identifier) @parameter\n)\n\n(default_parameter\n  name: (identifier) @parameter\n)\n\n(keyword_argument\n  name: (identifier) @parameter\n)\n\n(lambda_parameters\n  (tuple_pattern\n    (identifier) @parameter\n  )\n)\n\n(lambda_parameters\n  (identifier) @parameter\n)\n\n(parameters\n  (identifier) @parameter\n)\n\n(\n  (call\n    function: (identifier) @_isinstance\n    arguments: (argument_list\n      (_)\n      (identifier) @type\n    )\n  )\n  (#eq? @_isinstance \"isinstance\")\n)\n\n(type\n  (subscript\n    (identifier) @type\n  )\n)\n\n(type\n  (identifier) @type\n)\n\n(function_definition\n  name: (identifier) @function\n)\n\n(\n  (call\n    function: (identifier) @function.builtin\n  )\n  (#match? @function.builtin \"^(abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|exec|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__)$\")\n)\n\n(\n  (decorator\n    (identifier) @attribute.builtin\n  )\n  (#match? @attribute.builtin \"^(classmethod|property)$\")\n)\n\n(decorator\n  (call\n    (attribute\n      attribute: (identifier) @attribute\n    )\n  )\n)\n\n(decorator\n  (call\n    (identifier) @attribute\n  )\n)\n\n(decorator\n  (attribute\n    attribute: (identifier) @attribute\n  )\n)\n\n(decorator\n  (identifier) @attribute\n)\n\n(\n  (decorator\n    \"@\" @attribute\n  )\n  (#set! \"priority\"101)\n)\n\n(\n  (call\n    function: (attribute\n      attribute: (identifier) @constructor\n    )\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(\n  (call\n    function: (identifier) @constructor\n  )\n  (#match? @constructor \"^[A-Z]\")\n)\n\n(call\n  function: (attribute\n    attribute: (identifier) @method.call\n  )\n)\n\n(call\n  function: (identifier) @function.call\n)\n\n(\n  (assignment\n    left: (identifier) @type.definition\n    right: (call\n      function: (identifier) @_func\n    )\n  )\n  (#match? @_func \"^(TypeVar|NewType)$\")\n)\n\n(\n  (assignment\n    left: (identifier) @type.definition\n    (type\n      (identifier) @_annotation\n    )\n  )\n  (#eq? @_annotation \"TypeAlias\")\n)\n\n(\n  (identifier) @type.builtin\n  (#match? @type.builtin \"^(BaseException|Exception|ArithmeticError|BufferError|LookupError|AssertionError|AttributeError|EOFError|FloatingPointError|GeneratorExit|ImportError|ModuleNotFoundError|IndexError|KeyError|KeyboardInterrupt|MemoryError|NameError|NotImplementedError|OSError|OverflowError|RecursionError|ReferenceError|RuntimeError|StopIteration|StopAsyncIteration|SyntaxError|IndentationError|TabError|SystemError|SystemExit|TypeError|UnboundLocalError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|ValueError|ZeroDivisionError|EnvironmentError|IOError|WindowsError|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|FileExistsError|FileNotFoundError|InterruptedError|IsADirectoryError|NotADirectoryError|PermissionError|ProcessLookupError|TimeoutError|Warning|UserWarning|DeprecationWarning|PendingDeprecationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning|BytesWarning|ResourceWarning|bool|int|float|complex|list|tuple|range|str|bytes|bytearray|memoryview|set|frozenset|dict|type|object)$\")\n)\n\n(\n  (attribute\n    attribute: (identifier) @field\n  )\n  (#match? @field \"^([A-Z])@!.*$\")\n)\n\n(\n  (identifier) @constant.builtin\n  (#match? @constant.builtin \"^(NotImplemented|Ellipsis|quit|exit|copyright|credits|license)$\")\n)\n\n(\n  (identifier) @constant.builtin\n  (#match? @constant.builtin \"^__[a-zA-Z0-9_]*__$\")\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^[A-Z][A-Z_0-9]*$\")\n)\n\n(\n  (identifier) @type\n  (#match? @type \"^[A-Z].*[a-z]\")\n)\n\n(\n  (interpolation) @none\n)\n\n(\n  (identifier) @variable\n)";
pub const PYTHON_INJECTIONS: &str = "(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(\n  (call\n    function: (attribute\n      object: (identifier) @_re\n    )\n    arguments: (argument_list\n      (string\n        (string_content) @injection.content\n        (#set! injection.language \"injection.content\")\n      ) @_string\n    )\n  )\n  (#eq? @_re \"re\")\n  (#match? @_string \"^r.*\")\n  (#set! injection.language \"regex\")\n)";
pub const PYTHON_LOCALS: &str = "(\n  [\n    (module)\n    (function_definition)\n    (lambda)\n  ] @local.scope\n)\n\n(parameters\n  (identifier) @local.definition\n)\n\n(parameters\n  (typed_parameter\n    (identifier) @local.definition\n  )\n)\n\n(parameters\n  (default_parameter\n    name: (identifier) @local.definition\n  )\n)\n\n(parameters\n  (typed_default_parameter\n    name: (identifier) @local.definition\n  )\n)\n\n(parameters\n  (list_splat_pattern\n    (identifier) @local.definition\n  )\n)\n\n(parameters\n  (dictionary_splat_pattern\n    (identifier) @local.definition\n  )\n)\n\n(lambda_parameters\n  (identifier) @local.definition\n)\n\n(import_statement\n  name: (dotted_name\n    (identifier) @local.definition\n  )\n)\n\n(aliased_import\n  alias: (identifier) @local.definition\n)\n\n(\n  (identifier) @local.reference\n)";

pub const REGEX_HIGHLIGHTS: &str = ";; Forked from https://github.com/tree-sitter/tree-sitter-regex\n;; The MIT License (MIT) Copyright (c) 2014 Max Brunsfeld\n\n[\n  \"(\"\n  \")\"\n  \"(?\"\n  \"(?:\"\n  \"(?<\"\n  \">\"\n  \"[\"\n  \"]\"\n  \"{\"\n  \"}\"\n] @punctuation.bracket\n\n(group_name) @property\n\n[\n  (identity_escape)\n  (control_letter_escape)\n  (character_class_escape)\n  (control_escape)\n  (boundary_assertion)\n  (non_boundary_assertion)\n] @string.escape\n\n[\n  (any_character)\n  (start_assertion)\n  (end_assertion)\n] @punctuation.special\n\n[\n  \"*\"\n  \"+\"\n  \"?\"\n  (lazy)\n  \"|\"\n  \"=\"\n  \"<=\"\n  \"!\"\n  \"<!\"\n] @operator\n\n(count_quantifier\n  [\n    (decimal_digits) @number\n    \",\" @punctuation.delimiter\n  ])\n\n(character_class\n  [\n    \"^\" @operator\n    (class_range \"-\" @operator)\n  ])\n\n(class_character) @constant.character\n\n(pattern_character) @string\n";
pub const REGEX_INJECTIONS: &str = "";
pub const REGEX_LOCALS: &str = "";

pub const RUST_HIGHLIGHTS: &str = "(macro_invocation\n  macro: (identifier) @_ident @exception\n  \"!\" @exception\n  (#match? @_ident \"assert\")\n)\n\n(macro_invocation\n  macro: (identifier) @_ident @exception\n  \"!\" @exception\n  (#eq? @_ident \"panic\")\n)\n\n(empty_type\n  \"!\" @type.builtin\n)\n\n(macro_invocation\n  \"!\" @function.macro\n)\n\n(inner_attribute_item\n  [\n    \"!\"\n    \"#\"\n  ] @punctuation.special\n)\n\n(attribute_item\n  \"#\" @punctuation.special\n)\n\n(\n  [\n    \",\"\n    \".\"\n    \":\"\n    \"::\"\n    \";\"\n  ] @punctuation.delimiter\n)\n\n(for_lifetimes\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(bracketed_type\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(type_parameters\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(type_arguments\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(closure_parameters\n  \"|\" @punctuation.bracket\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(\n  [\n    \"!\"\n    \"!=\"\n    \"%\"\n    \"%=\"\n    \"&\"\n    \"&&\"\n    \"&=\"\n    \"*\"\n    \"*=\"\n    \"+\"\n    \"+=\"\n    \"-\"\n    \"-=\"\n    \"->\"\n    \"..\"\n    \"..=\"\n    \"/\"\n    \"/=\"\n    \"<\"\n    \"<<\"\n    \"<<=\"\n    \"<=\"\n    \"=\"\n    \"==\"\n    \"=>\"\n    \">\"\n    \">=\"\n    \">>\"\n    \">>=\"\n    \"?\"\n    \"@\"\n    \"^\"\n    \"^=\"\n    \"|\"\n    \"|=\"\n    \"||\"\n  ] @operator\n)\n\n(for_expression\n  \"for\" @repeat\n)\n\n(\"for\"\n  @keyword\n)\n\n(\n  [\n    \"break\"\n    \"continue\"\n    \"in\"\n    \"loop\"\n    \"while\"\n  ] @repeat\n)\n\n(\n  [\n    \"else\"\n    \"if\"\n  ] @conditional\n)\n\n(visibility_modifier\n  [\n    (crate)\n    (super)\n    (self)\n  ] @namespace\n)\n\n(scoped_identifier\n  [\n    (crate)\n    (super)\n    (self)\n  ] @namespace\n)\n\n(scoped_use_list\n  (self) @namespace\n)\n\n(use_list\n  (self) @namespace\n)\n\n(qualified_type\n  \"as\" @keyword.operator\n)\n\n(type_cast_expression\n  \"as\" @keyword.operator\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\"fn\"\n  @keyword.function\n)\n\n(lifetime\n  [\n    \"'\"\n    (identifier)\n  ] @storageclass.lifetime\n)\n\n(\n  [\n    \"const\"\n    \"static\"\n  ] @storageclass\n)\n\n(\n  [\n    \"ref\"\n    (mutable_specifier)\n  ] @type.qualifier\n)\n\n(\n  [\n    \"async\"\n    \"await\"\n  ] @keyword.coroutine\n)\n\n(\n  [\n    \"default\"\n    \"dyn\"\n    \"enum\"\n    \"extern\"\n    \"impl\"\n    \"let\"\n    \"match\"\n    \"move\"\n    \"pub\"\n    \"struct\"\n    \"trait\"\n    \"type\"\n    \"union\"\n    \"unsafe\"\n    \"where\"\n  ] @keyword\n)\n\n(use_as_clause\n  \"as\" @include\n)\n\n(\n  [\n    \"use\"\n    \"mod\"\n  ] @include\n)\n\n(\n  (char_literal) @character\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  [\n    (raw_string_literal)\n    (string_literal)\n  ] @string\n)\n\n(\n  (float_literal) @float\n)\n\n(\n  (integer_literal) @number\n)\n\n(\n  (boolean_literal) @boolean\n)\n\n(\n  (block_comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][!]\")\n)\n\n(\n  (block_comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (line_comment) @comment.documentation\n  (#match? @comment.documentation \"^//!\")\n)\n\n(\n  (line_comment) @comment.documentation\n  (#match? @comment.documentation \"^///$\")\n)\n\n(\n  (line_comment) @comment.documentation\n  (#match? @comment.documentation \"^///[^/]\")\n)\n\n(\n  [\n    (line_comment)\n    (block_comment)\n  ] @comment @spell\n)\n\n(macro_invocation\n  macro: (scoped_identifier\n    (identifier) @function.macro\n    .\n  )\n)\n\n(macro_invocation\n  macro: (identifier) @function.macro\n)\n\n(attribute\n  (scoped_identifier\n    (identifier) @function.macro\n    .\n  )\n)\n\n(attribute_item\n  (attribute\n    (identifier) @function.macro\n  )\n)\n\n(macro_definition\n  \"macro_rules!\" @function.macro\n)\n\n(\n  (metavariable) @function.macro\n)\n\n(\"$\"\n  @function.macro\n)\n\n(\n  (identifier) @constant.builtin\n  (#match? @constant.builtin \"^(Some|None|Ok|Err)$\")\n)\n\n(\n  (match_arm\n    pattern: (match_pattern\n      (scoped_identifier\n        name: (identifier) @constant\n      )\n    )\n  )\n  (#match? @constant \"^[A-Z]\")\n)\n\n(\n  (match_arm\n    pattern: (match_pattern\n      (identifier) @constant\n    )\n  )\n  (#match? @constant \"^[A-Z]\")\n)\n\n(call_expression\n  function: (scoped_identifier\n    \"::\"\n    name: (identifier) @constant\n  )\n  (#match? @constant \"^[A-Z]\")\n)\n\n(use_as_clause\n  alias: (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(use_list\n  (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(use_list\n  (scoped_identifier\n    (identifier) @namespace\n    .\n    (_)\n  )\n)\n\n(scoped_use_list\n  path: (scoped_identifier\n    (identifier) @namespace\n  )\n)\n\n(scoped_use_list\n  path: (identifier) @namespace\n)\n\n(\n  [\n    (crate)\n    (super)\n  ] @namespace\n)\n\n(\n  (scoped_identifier\n    name: (identifier) @constant\n  )\n  (#match? @constant \"^[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (scoped_identifier\n    name: (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (scoped_identifier\n    path: (identifier) @type\n  )\n  (#match? @type \"^[A-Z]\")\n)\n\n(scoped_type_identifier\n  (scoped_identifier\n    name: (identifier) @namespace\n  )\n)\n\n(scoped_type_identifier\n  path: (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(scoped_type_identifier\n  path: (identifier) @namespace\n)\n\n(scoped_identifier\n  (scoped_identifier\n    name: (identifier) @namespace\n  )\n)\n\n(scoped_identifier\n  path: (identifier) @namespace\n)\n\n(enum_variant\n  name: (identifier) @constant\n)\n\n(\n  (field_identifier) @constant\n  (#match? @constant \"^[A-Z]\")\n)\n\n(generic_function\n  function: (field_expression\n    field: (field_identifier) @function.call\n  )\n)\n\n(generic_function\n  function: (scoped_identifier\n    name: (identifier) @function.call\n  )\n)\n\n(generic_function\n  function: (identifier) @function.call\n)\n\n(call_expression\n  function: (field_expression\n    field: (field_identifier) @function.call\n  )\n)\n\n(call_expression\n  function: (scoped_identifier\n    (identifier) @function.call\n    .\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(closure_parameters\n  (_) @parameter\n)\n\n(parameter\n  (identifier) @parameter\n)\n\n(function_signature_item\n  (identifier) @function\n)\n\n(function_item\n  (identifier) @function\n)\n\n(loop_label\n  [\n    \"'\"\n    (identifier)\n  ] @label\n)\n\n(\n  (self) @variable.builtin\n)\n\n(mod_item\n  name: (identifier) @namespace\n)\n\n(shorthand_field_initializer\n  (identifier) @field\n)\n\n(\n  (field_identifier) @field\n)\n\n(\n  (primitive_type) @type.builtin\n)\n\n(\n  (type_identifier) @type\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^[A-Z][A-Z[0-9]_]*$\")\n)\n\n(const_item\n  name: (identifier) @constant\n)\n\n(\n  (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (identifier) @variable\n)";
pub const RUST_INJECTIONS: &str = "(macro_invocation\n  (token_tree) @injection.content\n  (#set! injection.language \"rust\")\n)\n\n(macro_definition\n  (macro_rule\n    left: (token_tree_pattern) @injection.content\n    (#set! injection.language \"rust\")\n    right: (token_tree) @injection.content\n    (#set! injection.language \"rust\")\n  )\n)\n\n(\n  [\n    (line_comment)\n    (block_comment)\n  ] @injection.content\n  (#set! injection.language \"comment\")\n)\n\n(\n  (macro_invocation\n    macro: (\n      (identifier) @_html_def\n    )\n    (token_tree) @injection.content\n    (#set! injection.language \"html\")\n  )\n  (#eq? @_html_def \"html\")\n)\n\n(call_expression\n  function: (scoped_identifier\n    path: (identifier) @_regex\n    (#eq? @_regex \"Regex\")\n    name: (identifier) @_new\n    (#eq? @_new \"new\")\n  )\n  arguments: (arguments\n    (raw_string_literal) @injection.content\n    (#set! injection.language \"regex\")\n  )\n)\n\n(call_expression\n  function: (scoped_identifier\n    path: (scoped_identifier\n      (identifier) @_regex\n      (#eq? @_regex \"Regex\")\n      .\n    )\n    name: (identifier) @_new\n    (#eq? @_new \"new\")\n  )\n  arguments: (arguments\n    (raw_string_literal) @injection.content\n    (#set! injection.language \"regex\")\n  )\n)";
pub const RUST_LOCALS: &str = "(\n  [\n    (function_item)\n    (closure_expression)\n    (block)\n  ] @local.scope\n)\n\n(parameter\n  (identifier) @local.definition\n)\n\n(closure_parameters\n  (identifier) @local.definition\n)\n\n(\n  (identifier) @local.reference\n)";

pub const TSX_HIGHLIGHTS: &str = "(\n  (jsx_text) @none\n)\n\n(jsx_self_closing_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_self_closing_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_closing_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_closing_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_opening_element\n  (\n    (nested_identifier\n      (identifier) @tag\n      (identifier) @constructor\n    )\n  )\n)\n\n(jsx_opening_element\n  (\n    (identifier) @constructor\n    (#match? @constructor \"^[A-Z]\")\n  )\n)\n\n(jsx_self_closing_element\n  name: (identifier) @tag\n)\n\n(jsx_closing_element\n  name: (identifier) @tag\n)\n\n(jsx_opening_element\n  name: (identifier) @tag\n)\n\n(jsx_attribute\n  (property_identifier) @tag.attribute\n)\n\n(jsx_fragment\n  [\n    \">\"\n    \"<\"\n    \"/\"\n  ] @tag.delimiter\n)\n\n(jsx_self_closing_element\n  [\n    \"/\"\n    \">\"\n    \"<\"\n  ] @tag.delimiter\n)\n\n(jsx_element\n  close_tag: (jsx_closing_element\n    [\n      \"<\"\n      \"/\"\n      \">\"\n    ] @tag.delimiter\n  )\n)\n\n(jsx_element\n  open_tag: (jsx_opening_element\n    [\n      \"<\"\n      \">\"\n    ] @tag.delimiter\n  )\n)\n\n(property_signature\n  name: (property_identifier) @method\n  type: (type_annotation\n    [\n      (union_type\n        (parenthesized_type\n          (function_type)\n        )\n      )\n      (function_type)\n    ]\n  )\n)\n\n(method_signature\n  name: (_) @method\n)\n\n(ambient_declaration\n  (function_signature\n    name: (identifier) @function\n  )\n)\n\n(arrow_function\n  parameter: (identifier) @parameter\n)\n\n(required_parameter\n  (array_pattern\n    (identifier) @parameter\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @parameter\n    )\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (shorthand_property_identifier_pattern) @parameter\n  )\n)\n\n(required_parameter\n  (rest_pattern\n    (identifier) @parameter\n  )\n)\n\n(optional_parameter\n  (identifier) @parameter\n)\n\n(required_parameter\n  (identifier) @parameter\n)\n\n(\n  (undefined) @variable.builtin\n)\n\n(conditional_type\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(template_type\n  [\n    \"${\"\n    \"}\"\n  ] @punctuation.special\n)\n\n(optional_parameter\n  \"?\" @punctuation.special\n)\n\n(property_signature\n  \"?\" @punctuation.special\n)\n\n(method_signature\n  \"?\" @punctuation.special\n)\n\n(\"?.\"\n  @punctuation.delimiter\n)\n\n(opting_type_annotation\n  \"?:\" @punctuation.delimiter\n)\n\n(index_signature\n  \":\" @punctuation.delimiter\n)\n\n(type_annotation\n  \":\" @punctuation.delimiter\n)\n\n(intersection_type\n  \"&\" @punctuation.delimiter\n)\n\n(union_type\n  \"|\" @punctuation.delimiter\n)\n\n(type_parameters\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(type_arguments\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(non_null_expression\n  \"!\" @operator\n)\n\n(\n  (template_literal_type) @string\n)\n\n(import_statement\n  \"type\"\n  (import_clause\n    (named_imports\n      (\n        (import_specifier\n          name: (identifier) @type\n        )\n      )\n    )\n  )\n)\n\n(\n  (predefined_type) @type.builtin\n)\n\n(\n  (type_identifier) @type\n)\n\n(\n  [\n    \"abstract\"\n    \"private\"\n    \"protected\"\n    \"public\"\n    \"readonly\"\n  ] @type.qualifier\n)\n\n(as_expression\n  \"as\" @keyword\n)\n\n(\n  [\n    \"declare\"\n    \"enum\"\n    \"export\"\n    \"implements\"\n    \"interface\"\n    \"keyof\"\n    \"type\"\n    \"namespace\"\n    \"override\"\n    \"satisfies\"\n    \"module\"\n    \"infer\"\n  ] @keyword\n)\n\n(switch_default\n  \"default\" @conditional\n)\n\n(export_statement\n  \"default\" @keyword\n)\n\n(\n  [\n    \"throw\"\n    \"try\"\n    \"catch\"\n    \"finally\"\n  ] @exception\n)\n\n(\n  [\n    \"new\"\n    \"delete\"\n  ] @keyword.operator\n)\n\n(\n  [\"function\"] @keyword.function\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\n  [\n    \"async\"\n    \"await\"\n  ] @keyword.coroutine\n)\n\n(\n  [\n    \"break\"\n    \"class\"\n    \"const\"\n    \"debugger\"\n    \"export\"\n    \"extends\"\n    \"get\"\n    \"in\"\n    \"instanceof\"\n    \"let\"\n    \"set\"\n    \"static\"\n    \"target\"\n    \"typeof\"\n    \"var\"\n    \"with\"\n  ] @keyword\n)\n\n(\n  [\n    \"for\"\n    \"of\"\n    \"do\"\n    \"while\"\n    \"continue\"\n  ] @repeat\n)\n\n(namespace_import\n  \"as\" @include\n)\n\n(namespace_export\n  \"as\" @include\n)\n\n(import_specifier\n  \"as\" @include\n)\n\n(export_specifier\n  \"as\" @include\n)\n\n(\n  [\n    \"import\"\n    \"from\"\n  ] @include\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"switch\"\n    \"case\"\n  ] @conditional\n)\n\n(\n  (template_substitution\n    [\n      \"${\"\n      \"}\"\n    ] @punctuation.special\n  ) @none\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(unary_expression\n  [\n    \"delete\"\n    \"void\"\n    \"typeof\"\n  ] @keyword.operator\n)\n\n(unary_expression\n  [\n    \"!\"\n    \"~\"\n    \"-\"\n    \"+\"\n  ] @operator\n)\n\n(ternary_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(binary_expression\n  \"/\" @operator\n)\n\n(\n  [\n    \"--\"\n    \"-\"\n    \"-=\"\n    \"&&\"\n    \"+\"\n    \"++\"\n    \"+=\"\n    \"&=\"\n    \"/=\"\n    \"**=\"\n    \"<<=\"\n    \"<\"\n    \"<=\"\n    \"<<\"\n    \"=\"\n    \"==\"\n    \"===\"\n    \"!=\"\n    \"!==\"\n    \"=>\"\n    \">\"\n    \">=\"\n    \">>\"\n    \"||\"\n    \"%\"\n    \"%=\"\n    \"*\"\n    \"**\"\n    \">>>\"\n    \"&\"\n    \"|\"\n    \"^\"\n    \"??\"\n    \"*=\"\n    \">>=\"\n    \">>>=\"\n    \"^=\"\n    \"|=\"\n    \"&&=\"\n    \"||=\"\n    \"??=\"\n  ] @operator\n)\n\n(switch_case\n  \":\" @punctuation.delimiter\n)\n\n(pair_pattern\n  \":\" @punctuation.delimiter\n)\n\n(pair\n  \":\" @punctuation.delimiter\n)\n\n(\",\"\n  @punctuation.delimiter\n)\n\n(\".\"\n  @punctuation.delimiter\n)\n\n(\";\"\n  @punctuation.delimiter\n)\n\n(\"...\"\n  @punctuation.special\n)\n\n(\n  (identifier) @number\n  (#match? @number \"^(NaN|Infinity)$\")\n)\n\n(\n  (number) @number\n)\n\n(regex\n  \"/\" @punctuation.bracket\n)\n\n(\n  (regex_pattern) @string.regex\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (template_string) @string\n)\n\n(\n  (string) @string @spell\n)\n\n(\n  (string_fragment) @preproc\n  (#eq? @preproc \"use strict\")\n)\n\n(\n  (hash_bang_line) @preproc\n)\n\n(\n  (comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\n  [\n    (null)\n    (undefined)\n  ] @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  [\n    (this)\n    (super)\n  ] @variable.builtin\n)\n\n(namespace_import\n  (identifier) @namespace\n)\n\n(new_expression\n  constructor: (identifier) @constructor\n)\n\n(call_expression\n  function: (member_expression\n    property: [\n      (property_identifier)\n      (private_property_identifier)\n    ] @method.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (function)\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (arrow_function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (arrow_function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (function)\n)\n\n(method_definition\n  name: (property_identifier) @constructor\n  (#eq? @constructor \"constructor\")\n)\n\n(method_definition\n  name: [\n    (property_identifier)\n    (private_property_identifier)\n  ] @method\n)\n\n(generator_function_declaration\n  name: (identifier) @function\n)\n\n(generator_function\n  name: (identifier) @function\n)\n\n(function_declaration\n  name: (identifier) @function\n)\n\n(function\n  name: (identifier) @function\n)\n\n(\n  (identifier) @function.builtin\n  (#match? @function.builtin \"^(eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|require)$\")\n)\n\n(\n  (identifier) @namespace.builtin\n  (#eq? @namespace.builtin \"Intl\")\n)\n\n(\n  (identifier) @type.builtin\n  (#match? @type.builtin \"^(Object|Function|Boolean|Symbol|Number|Math|Date|String|RegExp|Map|Set|WeakMap|WeakSet|Promise|Array|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|ArrayBuffer|DataView|Error|EvalError|InternalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError)$\")\n)\n\n(\n  (identifier) @variable.builtin\n  (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n)\n\n(\n  (shorthand_property_identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (variable_declarator\n    name: (object_pattern\n      (shorthand_property_identifier_pattern)\n    )\n  ) @variable\n)\n\n(\n  (private_property_identifier) @property\n)\n\n(\n  (shorthand_property_identifier) @property\n)\n\n(\n  (property_identifier) @property\n)\n\n(\n  (identifier) @variable\n)";
pub const TSX_INJECTIONS: &str = "(\n  (\n    (comment) @_jsdoc_comment\n    (#lua-match? @_jsdoc_comment \"^/[*][*][^*].*[*]/$\")\n  ) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"jsdoc\")\n)\n\n(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(call_expression\n  function: (\n    (identifier) @injection.content\n    (#set! injection.language \"injection.language\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#not-eq? @injection.content \"svg\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"svg\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"gql\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"graphql\")\n  )\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"hbs\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"glimmer\")\n  )\n)\n\n(\n  (glimmer_template) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"glimmer\")\n)\n\n(call_expression\n  function: (member_expression\n    object: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (member_expression\n        object: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (call_expression\n        function: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(\n  (regex_pattern) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"regex\")\n)\n\n(\n  (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#lua-match? @injection.content \"^`#graphql\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"graphql\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(jsx_element\n  (jsx_opening_element\n    (identifier) @_name\n    (#eq? @_name \"style\")\n    (jsx_attribute) @_attr\n    (#eq? @_attr \"jsx\")\n  )\n  (jsx_expression\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language)\n  )\n)";
pub const TSX_LOCALS: &str = "(\n  (statement_block) @local.scope\n)\n\n(\n  (function) @local.scope\n)\n\n(\n  (arrow_function) @local.scope\n)\n\n(\n  (function_declaration) @local.scope\n)\n\n(\n  (method_definition) @local.scope\n)\n\n(\n  (for_statement) @local.scope\n)\n\n(\n  (for_in_statement) @local.scope\n)\n\n(\n  (catch_clause) @local.scope\n)\n\n(variable_declarator\n  name: (identifier) @local.definition\n)\n\n(import_specifier\n  (identifier) @local.definition\n)\n\n(namespace_import\n  (identifier) @local.definition\n)\n\n(function_declaration\n  (\n    (identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(method_definition\n  (\n    (property_identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(\n  (identifier) @local.reference\n)\n\n(\n  (shorthand_property_identifier) @local.reference\n)\n\n(required_parameter\n  (identifier) @local.definition\n)\n\n(optional_parameter\n  (identifier) @local.definition\n)\n\n(arrow_function\n  parameter: (identifier) @local.definition\n)\n\n(required_parameter\n  (object_pattern\n    (shorthand_property_identifier_pattern) @local.definition\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @local.definition\n    )\n  )\n)\n\n(required_parameter\n  (array_pattern\n    (identifier) @local.definition\n  )\n)\n\n(required_parameter\n  (rest_pattern\n    (identifier) @local.definition\n  )\n)";

pub const TYPESCRIPT_HIGHLIGHTS: &str = "(property_signature\n  name: (property_identifier) @method\n  type: (type_annotation\n    [\n      (union_type\n        (parenthesized_type\n          (function_type)\n        )\n      )\n      (function_type)\n    ]\n  )\n)\n\n(method_signature\n  name: (_) @method\n)\n\n(ambient_declaration\n  (function_signature\n    name: (identifier) @function\n  )\n)\n\n(arrow_function\n  parameter: (identifier) @parameter\n)\n\n(required_parameter\n  (array_pattern\n    (identifier) @parameter\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @parameter\n    )\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (shorthand_property_identifier_pattern) @parameter\n  )\n)\n\n(required_parameter\n  (rest_pattern\n    (identifier) @parameter\n  )\n)\n\n(optional_parameter\n  (identifier) @parameter\n)\n\n(required_parameter\n  (identifier) @parameter\n)\n\n(\n  (undefined) @variable.builtin\n)\n\n(conditional_type\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(template_type\n  [\n    \"${\"\n    \"}\"\n  ] @punctuation.special\n)\n\n(optional_parameter\n  \"?\" @punctuation.special\n)\n\n(property_signature\n  \"?\" @punctuation.special\n)\n\n(method_signature\n  \"?\" @punctuation.special\n)\n\n(\"?.\"\n  @punctuation.delimiter\n)\n\n(opting_type_annotation\n  \"?:\" @punctuation.delimiter\n)\n\n(index_signature\n  \":\" @punctuation.delimiter\n)\n\n(type_annotation\n  \":\" @punctuation.delimiter\n)\n\n(intersection_type\n  \"&\" @punctuation.delimiter\n)\n\n(union_type\n  \"|\" @punctuation.delimiter\n)\n\n(type_parameters\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(type_arguments\n  [\n    \"<\"\n    \">\"\n  ] @punctuation.bracket\n)\n\n(non_null_expression\n  \"!\" @operator\n)\n\n(\n  (template_literal_type) @string\n)\n\n(import_statement\n  \"type\"\n  (import_clause\n    (named_imports\n      (\n        (import_specifier\n          name: (identifier) @type\n        )\n      )\n    )\n  )\n)\n\n(\n  (predefined_type) @type.builtin\n)\n\n(\n  (type_identifier) @type\n)\n\n(\n  [\n    \"abstract\"\n    \"private\"\n    \"protected\"\n    \"public\"\n    \"readonly\"\n  ] @type.qualifier\n)\n\n(as_expression\n  \"as\" @keyword\n)\n\n(\n  [\n    \"declare\"\n    \"enum\"\n    \"export\"\n    \"implements\"\n    \"interface\"\n    \"keyof\"\n    \"type\"\n    \"namespace\"\n    \"override\"\n    \"satisfies\"\n    \"module\"\n    \"infer\"\n  ] @keyword\n)\n\n(switch_default\n  \"default\" @conditional\n)\n\n(export_statement\n  \"default\" @keyword\n)\n\n(\n  [\n    \"throw\"\n    \"try\"\n    \"catch\"\n    \"finally\"\n  ] @exception\n)\n\n(\n  [\n    \"new\"\n    \"delete\"\n  ] @keyword.operator\n)\n\n(\n  [\"function\"] @keyword.function\n)\n\n(\n  [\n    \"return\"\n    \"yield\"\n  ] @keyword.return\n)\n\n(\n  [\n    \"async\"\n    \"await\"\n  ] @keyword.coroutine\n)\n\n(\n  [\n    \"break\"\n    \"class\"\n    \"const\"\n    \"debugger\"\n    \"export\"\n    \"extends\"\n    \"get\"\n    \"in\"\n    \"instanceof\"\n    \"let\"\n    \"set\"\n    \"static\"\n    \"target\"\n    \"typeof\"\n    \"var\"\n    \"with\"\n  ] @keyword\n)\n\n(\n  [\n    \"for\"\n    \"of\"\n    \"do\"\n    \"while\"\n    \"continue\"\n  ] @repeat\n)\n\n(namespace_import\n  \"as\" @include\n)\n\n(namespace_export\n  \"as\" @include\n)\n\n(import_specifier\n  \"as\" @include\n)\n\n(export_specifier\n  \"as\" @include\n)\n\n(\n  [\n    \"import\"\n    \"from\"\n  ] @include\n)\n\n(\n  [\n    \"if\"\n    \"else\"\n    \"switch\"\n    \"case\"\n  ] @conditional\n)\n\n(\n  (template_substitution\n    [\n      \"${\"\n      \"}\"\n    ] @punctuation.special\n  ) @none\n)\n\n(\n  [\n    \"(\"\n    \")\"\n    \"[\"\n    \"]\"\n    \"{\"\n    \"}\"\n  ] @punctuation.bracket\n)\n\n(unary_expression\n  [\n    \"delete\"\n    \"void\"\n    \"typeof\"\n  ] @keyword.operator\n)\n\n(unary_expression\n  [\n    \"!\"\n    \"~\"\n    \"-\"\n    \"+\"\n  ] @operator\n)\n\n(ternary_expression\n  [\n    \"?\"\n    \":\"\n  ] @conditional.ternary\n)\n\n(binary_expression\n  \"/\" @operator\n)\n\n(\n  [\n    \"--\"\n    \"-\"\n    \"-=\"\n    \"&&\"\n    \"+\"\n    \"++\"\n    \"+=\"\n    \"&=\"\n    \"/=\"\n    \"**=\"\n    \"<<=\"\n    \"<\"\n    \"<=\"\n    \"<<\"\n    \"=\"\n    \"==\"\n    \"===\"\n    \"!=\"\n    \"!==\"\n    \"=>\"\n    \">\"\n    \">=\"\n    \">>\"\n    \"||\"\n    \"%\"\n    \"%=\"\n    \"*\"\n    \"**\"\n    \">>>\"\n    \"&\"\n    \"|\"\n    \"^\"\n    \"??\"\n    \"*=\"\n    \">>=\"\n    \">>>=\"\n    \"^=\"\n    \"|=\"\n    \"&&=\"\n    \"||=\"\n    \"??=\"\n  ] @operator\n)\n\n(switch_case\n  \":\" @punctuation.delimiter\n)\n\n(pair_pattern\n  \":\" @punctuation.delimiter\n)\n\n(pair\n  \":\" @punctuation.delimiter\n)\n\n(\",\"\n  @punctuation.delimiter\n)\n\n(\".\"\n  @punctuation.delimiter\n)\n\n(\";\"\n  @punctuation.delimiter\n)\n\n(\"...\"\n  @punctuation.special\n)\n\n(\n  (identifier) @number\n  (#match? @number \"^(NaN|Infinity)$\")\n)\n\n(\n  (number) @number\n)\n\n(regex\n  \"/\" @punctuation.bracket\n)\n\n(\n  (regex_pattern) @string.regex\n)\n\n(\n  (escape_sequence) @string.escape\n)\n\n(\n  (template_string) @string\n)\n\n(\n  (string) @string @spell\n)\n\n(\n  (string_fragment) @preproc\n  (#eq? @preproc \"use strict\")\n)\n\n(\n  (hash_bang_line) @preproc\n)\n\n(\n  (comment) @comment.documentation\n  (#match? @comment.documentation \"^/[*][*][^*].*[*]/$\")\n)\n\n(\n  (comment) @comment @spell\n)\n\n(\n  [\n    (null)\n    (undefined)\n  ] @constant.builtin\n)\n\n(\n  [\n    (true)\n    (false)\n  ] @boolean\n)\n\n(\n  [\n    (this)\n    (super)\n  ] @variable.builtin\n)\n\n(namespace_import\n  (identifier) @namespace\n)\n\n(new_expression\n  constructor: (identifier) @constructor\n)\n\n(call_expression\n  function: (member_expression\n    property: [\n      (property_identifier)\n      (private_property_identifier)\n    ] @method.call\n  )\n)\n\n(call_expression\n  function: (identifier) @function.call\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (function)\n)\n\n(assignment_expression\n  left: (identifier) @function\n  right: (arrow_function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (function)\n)\n\n(variable_declarator\n  name: (identifier) @function\n  value: (arrow_function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (function)\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @method\n  )\n  right: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (arrow_function)\n)\n\n(pair\n  key: (property_identifier) @method\n  value: (function)\n)\n\n(method_definition\n  name: (property_identifier) @constructor\n  (#eq? @constructor \"constructor\")\n)\n\n(method_definition\n  name: [\n    (property_identifier)\n    (private_property_identifier)\n  ] @method\n)\n\n(generator_function_declaration\n  name: (identifier) @function\n)\n\n(generator_function\n  name: (identifier) @function\n)\n\n(function_declaration\n  name: (identifier) @function\n)\n\n(function\n  name: (identifier) @function\n)\n\n(\n  (identifier) @function.builtin\n  (#match? @function.builtin \"^(eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|require)$\")\n)\n\n(\n  (identifier) @namespace.builtin\n  (#eq? @namespace.builtin \"Intl\")\n)\n\n(\n  (identifier) @type.builtin\n  (#match? @type.builtin \"^(Object|Function|Boolean|Symbol|Number|Math|Date|String|RegExp|Map|Set|WeakMap|WeakSet|Promise|Array|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|ArrayBuffer|DataView|Error|EvalError|InternalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError)$\")\n)\n\n(\n  (identifier) @variable.builtin\n  (#match? @variable.builtin \"^(arguments|module|console|window|document)$\")\n)\n\n(\n  (shorthand_property_identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @constant\n  (#match? @constant \"^_*[A-Z][A-Z[0-9]_]*$\")\n)\n\n(\n  (identifier) @type\n  (#match? @type \"^[A-Z]\")\n)\n\n(\n  (variable_declarator\n    name: (object_pattern\n      (shorthand_property_identifier_pattern)\n    )\n  ) @variable\n)\n\n(\n  (private_property_identifier) @property\n)\n\n(\n  (shorthand_property_identifier) @property\n)\n\n(\n  (property_identifier) @property\n)\n\n(\n  (identifier) @variable\n)";
pub const TYPESCRIPT_INJECTIONS: &str = "(\n  (\n    (comment) @_jsdoc_comment\n    (#lua-match? @_jsdoc_comment \"^/[*][*][^*].*[*]/$\")\n  ) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"jsdoc\")\n)\n\n(\n  (comment) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"comment\")\n)\n\n(call_expression\n  function: (\n    (identifier) @injection.content\n    (#set! injection.language \"injection.language\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#not-eq? @injection.content \"svg\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"svg\")\n  )\n  arguments: [\n    (arguments\n      (template_string) @injection.content\n      (#set! injection.language \"injection.content\")\n    )\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n  ]\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"gql\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"graphql\")\n  )\n)\n\n(call_expression\n  function: (\n    (identifier) @_name\n    (#eq? @_name \"hbs\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"glimmer\")\n  )\n)\n\n(\n  (glimmer_template) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"glimmer\")\n)\n\n(call_expression\n  function: (member_expression\n    object: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (identifier) @_name\n    (#eq? @_name \"styled\")\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (member_expression\n        object: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(call_expression\n  function: (call_expression\n    function: (member_expression\n      object: (call_expression\n        function: (identifier) @_name\n        (#eq? @_name \"styled\")\n      )\n    )\n  )\n  arguments: (\n    (template_string) @injection.content\n    (#set! injection.language \"injection.content\")\n    (#offset! @injection.content 0 1 0 -1)\n    (#set! injection.language \"css\")\n  )\n)\n\n(\n  (regex_pattern) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#set! injection.language \"regex\")\n)\n\n(\n  (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#lua-match? @injection.content \"^`#graphql\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"graphql\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (template_string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)\n\n(assignment_expression\n  left: (member_expression\n    property: (property_identifier) @_prop\n    (#any-of? @_prop \"innerHTML\"\"outerHTML\")\n  )\n  right: (string) @injection.content\n  (#set! injection.language \"injection.content\")\n  (#offset! @injection.content 0 1 0 -1)\n  (#set! injection.language \"html\")\n)";
pub const TYPESCRIPT_LOCALS: &str = "(\n  (statement_block) @local.scope\n)\n\n(\n  (function) @local.scope\n)\n\n(\n  (arrow_function) @local.scope\n)\n\n(\n  (function_declaration) @local.scope\n)\n\n(\n  (method_definition) @local.scope\n)\n\n(\n  (for_statement) @local.scope\n)\n\n(\n  (for_in_statement) @local.scope\n)\n\n(\n  (catch_clause) @local.scope\n)\n\n(variable_declarator\n  name: (identifier) @local.definition\n)\n\n(import_specifier\n  (identifier) @local.definition\n)\n\n(namespace_import\n  (identifier) @local.definition\n)\n\n(function_declaration\n  (\n    (identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(method_definition\n  (\n    (property_identifier) @local.definition\n  )\n  (#set! definition.var.scope parent)\n)\n\n(\n  (identifier) @local.reference\n)\n\n(\n  (shorthand_property_identifier) @local.reference\n)\n\n(required_parameter\n  (identifier) @local.definition\n)\n\n(optional_parameter\n  (identifier) @local.definition\n)\n\n(arrow_function\n  parameter: (identifier) @local.definition\n)\n\n(required_parameter\n  (object_pattern\n    (shorthand_property_identifier_pattern) @local.definition\n  )\n)\n\n(required_parameter\n  (object_pattern\n    (pair_pattern\n      value: (identifier) @local.definition\n    )\n  )\n)\n\n(required_parameter\n  (array_pattern\n    (identifier) @local.definition\n  )\n)\n\n(required_parameter\n  (rest_pattern\n    (identifier) @local.definition\n  )\n)";
